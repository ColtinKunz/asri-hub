version: "3"

services:
  psql:
    image: postgres:13.3
    container_name: psql
    environment: &dbConfig
      POSTGRES_DB: database
      POSTGRES_USER: database_admin
      POSTGRES_PASSWORD: secret_password
      POSTGRES_PORT: "5432"
    ports:
      - "5432:5432"
    volumes:
      - "./psql-data:/var/lib/postgresql/data"
  # redis:
  #   image: redis:latest
  #   container_name: redis
  #   command: ["--appendonly yes"]
  #   volumes:
  #     - ./redis-data:/data
  # rabbitmq:
  #   logging:
  #     driver: none
  #   hostname: rabbitmq
  #   image: rabbitmq:latest
  #   container_name: rabbitmq
  #   volumes:
  #     - ./rabbitmq-data:/var/lib/rabbitmq/mnesia
  backend: &backendConfig
    build:
      context: "./backend"
      dockerfile: dev.Dockerfile
    container_name: backend
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    env_file: ./backend/.env
    environment:
      POSTGRES_HOST: psql
      <<: *dbConfig
    ports:
      - "8000:8000"
    depends_on:
      - psql
    restart: on-failure
    volumes:
      - ./backend/backend:/app
  # backend-worker:
  #   <<: *backendConfig
  #   container_name: backend-worker
  #   command:
  #     - "python"
  #     - "-m"
  #     - "celery"
  #     - "-A"
  #     - "backend.celery"
  #     - "worker"
  #     - "--loglevel=INFO"
  #   ports: []
  #   depends_on:
  #     - psql
  #     - redis
  #     - rabbitmq
  # backend-scheduler:
  #   <<: *backendConfig
  #   container_name: backend-scheduler
  #   command:
  #     - "python"
  #     - "-m"
  #     - "celery"
  #     - "-A"
  #     - "backend.celery"
  #     - "beat"
  #     - "--loglevel=INFO"
  #   ports: []
  #   depends_on:
  #     - psql
  #     - redis
  #     - rabbitmq
  frontend:
    build:
      context: "./frontend"
      dockerfile: dev.Dockerfile
    container_name: frontend
    command: ["npm", "run", "start"]
    env_file: ./frontend/.env.development
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
      - "35729:35729"
    restart: on-failure
    volumes:
      - ./frontend/public:/app/public
      - ./frontend/src:/app/src
      - ./frontend/.env.development:/app/.env.development
  # proxy:
  #   build:
  #     context: "./proxy"
  #     dockerfile: dev.Dockerfile
  #   container_name: proxy
  #   env_file: ./proxy/.env
  #   ports:
  #     - "80:80"
  #   restart: on-failure
  #   depends_on:
  #     - backend
  #     - frontend
