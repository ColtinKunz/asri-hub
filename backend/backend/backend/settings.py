"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from os import getenv
from json import loads as json_load

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DEBUG", default="true").lower() == "true"

ALLOWED_HOSTS = json_load(getenv("ALLOWED_HOSTS", default='["*"]'))

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = json_load(
    getenv("CSRF_TRUSTED_ORIGINS", default='["https://localhost"]')
)


# Application definition

INSTALLED_APPS = [
    # core
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    # "django_celery_results",
    # ours
    "main.apps.MainConfig",
    "jwt_auth.apps.JWTAuthConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.url_prefix"
BASE_URL = f'/{getenv("BASE_URL", default="")}/'.replace("//", "/")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": getenv("POSTGRES_DB"),
        "USER": getenv("POSTGRES_USER"),
        "PASSWORD": getenv("POSTGRES_PASSWORD"),
        "HOST": getenv("POSTGRES_HOST"),
        "PORT": getenv("POSTGRES_PORT"),
    }
}

AUTH_USER_MODEL = "main.User"


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = getenv("TIME_ZONE", default="UTC")

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = f"{BASE_URL.rstrip('/')}/static/"
STATIC_ROOT = str(Path(BASE_DIR) / "staticfiles")

# os dependent behavior (but should allow non root usage within volumes)
FILE_UPLOAD_PERMISSIONS = None

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django Rest Framework Settings
# https://www.django-rest-framework.org/#installation

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "jwt_auth.authentication.JWTAuthentication",
    ],
}

if DEBUG:
    # In debug mode, allow session authentication
    REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"].insert(
        0, "rest_framework.authentication.SessionAuthentication"
    )


# Django Rest Framework JWT Plugin Settings
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
JWT_SECURE_TOKEN = getenv("JWT_SECURE_TOKEN", default="false").lower() == "true"

ROTATE_REFRESH_TOKENS = True

UPDATE_LAST_LOGIN = True

# # Celery config
# CELERY_BEAT_MAX_LOOP_INTERVAL = 5
# CELERY_BEAT_SCHEDULER = "redbeat.RedBeatScheduler"
# CELERY_TASK_DEFAULT_QUEUE = "backend"

# CELERY_BROKER_URL = f"amqp://{getenv('CELERY_BROKER_URL')}"

# CELERY_RESULT_BACKEND = "django-db"
# CELERY_RESULT_EXTEND = True

# CELERY_REDBEAT_KEY_PREFIX = "task:"
# CELERY_REDBEAT_REDIS_URL = f'redis://{getenv("CELERY_REDBEAT_REDIS_URL")}:6379/2'
